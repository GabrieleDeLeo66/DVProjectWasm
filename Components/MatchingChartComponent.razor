@using MudBlazor
@using Syncfusion.Blazor.LinearGauge
<script type="text/javascript" src="https://d3js.org/d3.v4.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
<script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/map.js"></script>
<script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
@inject IJSRuntime JS

<style>
    #chartdiv {
        width: 100%;
        height: 80vh;
        font-size: 11px;
    }
</style>

<script>
    var root2;
    var chart2;
    var data2 = [];
    var selectedCountry;
    var selectedBarChart;
    var selectedLineChart;
    var xAxis2;
    var yAxis2;
    var legend2;

    // function CreateChart(country) { 
    //     selectedCountry = country;

    //     root2 = am5.Root.new("chartdiv");
    //     root2.setThemes([
    //         am5themes_Animated.new(root2)
    //     ]);

    //     chart2 = root2.container.children.push(
    //         am5xy.XYChart.new(root2, {
    //             panX: false,
    //             panY: false,
    //             wheelX: "panX",
    //             wheelY: "zoomX",
    //             layout: root2.verticalLayout,
    //             arrangeTooltips: false,
    //             paddingLeft: 0,
    //             paddingRight: 10
    //         })
    //     );

    //     // Use only absolute numbers
    //     chart2.getNumberFormatter().set("numberFormat", "#.#s");

    //     legend2 = chart2.children.push(
    //         am5.Legend.new(root2, {
    //             centerX: am5.p50,
    //             x: am5.p50
    //         })
    //     );

    //     yAxis2 = chart2.yAxes.push(
    //         am5xy.CategoryAxis.new(root2, {
    //             categoryField: "date",
    //             renderer: am5xy.AxisRendererY.new(root2, {
    //                 inversed: true,
    //                 cellStartLocation: 0.1,
    //                 cellEndLocation: 0.9,
    //                 minorGridEnabled: true,
    //                 minGridDistance: 20
    //             })
    //         })
    //     );

    //     yAxis2.data.setAll(data2); //forse va dopo

    //     xAxis2 = chart2.xAxes.push(
    //         am5xy.ValueAxis.new(root2, {
    //             renderer: am5xy.AxisRendererX.new(root2, {
    //                 minGridDistance: 60,
    //                 strokeOpacity: 0.1
    //             })
    //         })
    //     );

        

        

    //     var mainCountry = ["Italy", "France", "Spain", "Portugal", "Germany", "United Kingdom", "Netherlands", "Russia"]

    //     d3.queue()
    //         .defer(d3.csv, "/data/owid-covid-data-Europe.csv", function (d) {
    //             var date = new Date(d.date)
    //             if (mainCountry.includes(d.location) && date.getDay() == 0 && date.getMonth()%2 == 0) {
    //                 element = {
    //                     "date": d.date,
    //                     "location": d.location,
    //                     "new_cases": -d.new_cases,
    //                     "new_vaccinations": +d.new_vaccinations,
    //                 };
    //                 //element[field] = d[i][field];

    //                 if (!data2[d.location]) {
    //                     data2[d.location] = [element];
    //                 }
    //                 else {
    //                     tmp = data2[d.location];
    //                     tmp.push(element);
    //                     data2[d.location] = tmp;
    //                 }
    //             }
    //         })
    //         .await(ready);       
    // }

    // function createSeries(field, labelCenterX, pointerOrientation, rangeValue) {
    //     var series = chart2.series.push(
    //         am5xy.ColumnSeries.new(root2, {
    //             xAxis: xAxis2,
    //             yAxis: yAxis2,
    //             valueXField: field,
    //             categoryYField: "date",
    //             sequencedInterpolation: true,
    //             clustered: false,
    //             tooltip: am5.Tooltip.new(root2, {
    //                 pointerOrientation: pointerOrientation,
    //                 labelText: "{categoryY}: {valueX}"
    //             })
    //         })
    //     );

    //     series.columns.template.setAll({
    //         height: am5.p100,
    //         strokeOpacity: 0,
    //         fillOpacity: 0.8
    //     });

    //     // series.bullets.push(function () {
    //     //     return am5.Bullet.new(root2, {
    //     //         locationX: 1,
    //     //         locationY: 0.5,
    //     //         sprite: am5.Label.new(root2, {
    //     //             centerY: am5.p50,
    //     //             text: "{valueX}",
    //     //             populateText: true,
    //     //             centerX: labelCenterX
    //     //         })
    //     //     });
    //     // });

    //     series.data.setAll(data2[selectedCountry]);
    //     series.appear();

    //     var rangeDataItem = xAxis2.makeDataItem({
    //         value: rangeValue
    //     });
    //     xAxis2.createAxisRange(rangeDataItem);
    //     rangeDataItem.get("grid").setAll({
    //         strokeOpacity: 1,
    //         stroke: series.get("stroke")
    //     });

    //     var label = rangeDataItem.get("label");
    //     label.setAll({
    //         text: field.toUpperCase(),
    //         fontSize: "1.1em",
    //         fill: series.get("stroke"),
    //         paddingTop: 10,
    //         isMeasured: false,
    //         centerX: labelCenterX
    //     });
    //     label.adapters.add("dy", function () {
    //         return -chart2.plotContainer.height();
    //     });

    //     return series;
    // }


    // function ready() {
    //     console.log(data2)

    //     yAxis2.data.setAll(data2[selectedCountry]); //forse va dopo

    //     console.log(createSeries("new_cases", am5.p100, "right", -100));
    //     createSeries("new_vaccinations", 0, "left", 100);

    //     var cursor = chart2.set("cursor", am5xy.XYCursor.new(root2, {
    //         behavior: "zoomY"
    //     }));
    //     cursor.lineY.set("forceHidden", true);
    //     cursor.lineX.set("forceHidden", true);

    //     chart2.appear(1000, 100);
    // }


    function CreateChart(country, bar, line) {

        selectedCountry = country;
        selectedBarChart = bar;
        selectedLineChart = line;

        root2 = am5.Root.new("chartdiv");
        root2.setThemes([
            am5themes_Animated.new(root2)
        ]);

        chart2 = root2.container.children.push(am5xy.XYChart.new(root2, {
            panX: true,
            panY: true,
            wheelX: "panX",
            wheelY: "zoomX",
            pinchZoomX: true,
            paddingLeft: 0
        }));

        var cursor = chart2.set("cursor", am5xy.XYCursor.new(root2, {
            behavior: "none"
        }));
        cursor.lineY.set("visible", false);

        xAxis2 = chart2.xAxes.push(am5xy.GaplessDateAxis.new(root2, {
            maxDeviation: 0,
            baseInterval: {
                timeUnit: "day",
                count: 1
            },
            renderer: am5xy.AxisRendererX.new(root2, {
                minorGridEnabled: true
            }),
            tooltip: am5.Tooltip.new(root2, {})
        }));

        yAxis2 = chart2.yAxes.push(am5xy.ValueAxis.new(root2, {
            // extraMin: 0.2,
            renderer: am5xy.AxisRendererY.new(root2, {})
        }));

        var mainCountry = ["Italy", "France", "Spain", "Portugal", "Germany", "United Kingdom", "Netherlands", "Russia"];
            d3.queue()
                .defer(d3.csv, "data/owid-covid-data-Europe.csv", function (d) {
                    var date = new Date(d.date)
                    if (mainCountry.includes(d.location) && date.getDay() == 0 /* && date.getMonth()%2 == 0 */) {
                        element = {
                            "date": d.date,
                            "location": d.location,
                            "new_deaths": +d.new_deaths,
                            "new_cases": +d.new_cases,
                            "new_vaccinations": +d.new_vaccinations,
                            "new_tests": +d.new_tests,
                            "total_vaccinations": ((d.total_vaccinations == 0) ? null : +d.total_vaccinations),
                            "total_cases": ((d.total_cases == 0) ? null : +d.total_cases),
                            "total_tests": ((d.total_tests == 0) ? null : +d.total_tests),
                            "total_deaths": ((d.total_deaths == 0) ? null : +d.total_deaths),
                        };
                        //element[field] = d[i][field];

                        if (!data2[d.location]) {
                            data2[d.location] = [element];
                        }
                        else {
                            tmp = data2[d.location];
                            tmp.push(element);
                            data2[d.location] = tmp;
                        }
                    }
                })
                .await(ready);
    }

    function ready() {

        console.log(data2)

        var series = chart2.series.push(am5xy.LineSeries.new(root2, {
            name: selectedLineChart,
            xAxis: xAxis2,
            yAxis: yAxis2,
            valueYField: selectedLineChart,
            valueXField: "date",
            tooltip: am5.Tooltip.new(root2, {
                labelText: "{valueYField}: {valueY}"
            })
        }));

        series.data.processor = am5.DataProcessor.new(root2, {
            dateFields: ["date"],
            dateFormat: "dd-MM-yyyy"
        });

        // y axis for volume
        var volumeAxisRenderer = am5xy.AxisRendererY.new(root2, {});
        volumeAxisRenderer.grid.template.set("forceHidden", true);
        volumeAxisRenderer.labels.template.set("forceHidden", true);

        var volumeAxis = chart2.yAxes.push(am5xy.ValueAxis.new(root2, {
            height: am5.percent(50),
            y: am5.percent(100),
            centerY: am5.percent(100),
            panY: false,
            renderer: volumeAxisRenderer
        }));

        var volumeSeries = chart2.series.push(am5xy.ColumnSeries.new(root2, {
            name: selectedBarChart,
            xAxis: xAxis2,
            yAxis: volumeAxis,
            valueYField: selectedBarChart,
            valueXField: "date",
            tooltip: am5.Tooltip.new(root2, {
                labelText: "{valueYField}: {valueY}"
            })
        }));

        volumeSeries.columns.template.setAll({ fillOpacity: 0.6, strokeOpacity: 0, width: am5.percent(80) })


        // Add scrollbar
        // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/
        chart2.set("scrollbarX", am5.Scrollbar.new(root2, {
            orientation: "horizontal"
        }));

        series.data.setAll(data2[selectedCountry]);
        volumeSeries.data.setAll(data2[selectedCountry]);

        legend2 = chart2.children.push(am5.Legend.new(root2, {
            x: am5.percent(10),
            centerX: am5.percent(10),
            y: am5.percent(10),
            centerY: am5.percent(10)
        }));
        legend2.data.setAll(chart2.series.values);

        series.appear(1000);
        chart2.appear(1000, 100);

    }



    function UpdateChart(newCountry, newBar, newLine) {
        selectedCountry = newCountry;
        selectedBarChart = newBar;
        selectedLineChart = newLine;
        chart2.series.clear();
        legend2.data.clear();
        // legend2.data.clear();
        ready();
    }
</script>

@if (Loading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border m-5" style="width: 50px; height: 50px;" role="status" />
    </div>
}

<div id="chartdiv"></div>